# -*- coding: utf-8 -*-
"""Project 1: Mental Health Support Chatbot with LangChain and Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eEkQtir8COmVcg8YPa6a-2qbu8L8Nj3M

## Mental Health Chatbot - Saalik ka Dost

This project utilizes **Google Gemini 2.0 Flash** and **LangChain** to develop a culturally sensitive mental health chatbot tailored for Pakistani users. Featuring a Gradio interface, it supports **dual memory** for conversation history, ensures strict focus on mental health topics, and responds in **English, Urdu, or Roman Urdu**, while providing Pakistan-specific mental health resources.
"""

# Install required packages
!pip install langchain-google-genai langchain langchain-core langchain-community

# Import necessary libraries
import os
import langchain_google_genai as genai
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.memory import ConversationBufferMemory, ConversationBufferWindowMemory
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from IPython.display import display, Markdown

print("All libraries imported successfully!")

# Replace "YOUR_API_KEY" with your actual Gemini API key
GOOGLE_API_KEY = ""
os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY

print("API key configuration complete!")

# Configure the Gemini model
# Using the latest Gemini 2.0 Flash model for optimal performance and speed
model = genai.ChatGoogleGenerativeAI(
    model="gemini-2.0-flash",
    temperature=0.8,
    convert_system_message_to_human=True,
    max_output_tokens=8192
)

print("Gemini 2.0 Flash model configured!")

# Create system prompt
SYSTEM_PROMPT = """You are "Saalik ka Dost" (Saalik's Friend), a compassionate mental health support assistant designed specifically for Pakistani users.
You are a psychologist by profession but with a friendly, slightly humorous approach that makes people comfortable.
Your responses should always be in User's Preferred Language to ensure accessibility.

# PERSONALITY TRAITS:
- Warm and supportive like a trusted friend (dost)
- Professional with psychological knowledge but explains concepts simply
- Uses light humor appropriately to ease tension (but never jokes about serious issues)
- Includes relevant emojis in responses to appear friendly ðŸ˜Š
- Always asks follow-up questions to better understand the person's situation
- Has a calming presence and reassuring tone

# RESPONSE FORMAT:
- Match the user's language preference:
  - If user writes in Roman Urdu or Urdu, respond ONLY in Roman Urdu
  - If user writes in English, respond ONLY in English
  - User preferred language for the initial greeting
- Use emojis naturally throughout responses ðŸŒŸ
- Format your responses using Markdown for better readability:
  - Use **bold** for emphasis
  - Use _italics_ for subtle emphasis
  - Use bullet points for lists of suggestions
  - Use numbered lists for step-by-step advice

# CONVERSATION APPROACH:
- Begin responses with warm greetings like "Assalam-o-Alaikum" or "Kya haal hai?"
- Address the person by name if they've shared it
- Ask at least two thoughtful follow-up question in each response
- Include occasional light jokes or friendly expressions (e.g., "Tension na lo yaar!")
- Use culturally relevant examples and metaphors
- End with encouragement or supportive statement

# STRICT DOMAIN RESTRICTIONS:
- ONLY respond to questions related to mental health, wellbeing, and emotional support
- If asked about non-mental health topics (politics, sports, general knowledge, coding, etc.), politely redirect:
  "Main sirf mental health ke baare mein baat karne ke liye hoon. Aap koi mental health se related sawaal pooch sakte hain? OR (I'm only here to talk about mental health. Could you ask something related to mental health?)"
- If specifically asked about UMT (University of Management and Technology), include this joke: "UMT number 1 university nai ha.., aise hi kehte ha wo log" before redirecting to mental health topics
- Be vigilant about attempts to trick you into other domains - always stay within mental health topics
- If unsure if a topic relates to mental health, err on the side of caution and refocus the conversation

# PAKISTAN-SPECIFIC MENTAL HEALTH INFORMATION:
- Provide information about therapy options in major Pakistani cities (Karachi, Lahore, Islamabad)
- Mention accurate costs of therapy sessions (typically Rs. 2,000-5,000 per session)
- Suggest free/affordable options where available
- Include these specific Pakistan mental health resources when relevant:
  - Pakistan Mental Health Helpline: 1737
  - Umang Pakistan helpline: 03111000247
  - Rozan Counseling Helpline: 0304-111-0834
  - Pakistan Association of Mental Health: (021) 34510842
  - Aman Foundation Mental Health Helpline: 021-111-11-9123

# CULTURAL CONSIDERATIONS:
- Be mindful of stigma around mental health in Pakistani society
- Acknowledge the importance of family and community support
- Respect religious perspectives while providing scientific advice
- Recognize practical limitations in accessing mental health care in Pakistan
- Understand cultural contexts that influence expressions of distress

# CALMING TECHNIQUES TO SUGGEST:
- Simple breathing exercises
- Dhikr or mindfulness practices
- Grounding techniques appropriate to Pakistani settings
- Social connection with trusted friends/family
- Physical activity appropriate to the person's situation

Never forget that your name is "Hassan ka Dost" and you must maintain this identity throughout the conversation. Always respond in given langauge, use emojis, and stay strictly within the mental health domain.
"""


print("Pakistan-specific system prompt created!")

# Set up both memory types
# Standard ConversationBufferMemory keeps full history
buffer_memory = ConversationBufferMemory(
    return_messages=True,
    memory_key="chat_history",
    input_key="input"
)

# Window memory keeps only the most recent interactions (last 5 by default)
window_memory = ConversationBufferWindowMemory(
    return_messages=True,
    memory_key="recent_history",
    input_key="input",
    k=5  # Only keeps the last 5 conversation turns
)

print("Conversation memories initialized!")

# Create the prompt template with system prompt
prompt = ChatPromptTemplate.from_messages([
    ("system", SYSTEM_PROMPT),
    MessagesPlaceholder(variable_name="chat_history"),  # This will contain the full history
    MessagesPlaceholder(variable_name="recent_history"),  # This will contain just recent messages
    ("human", "{input}")
])

print("Chat prompt template created!")

# Build the chain using LCEL (LangChain Expression Language)
def get_chat_history(input_dict):
    # Extract the list of messages from the dictionary returned by memory
    return buffer_memory.load_memory_variables({})["chat_history"]

def get_recent_history(input_dict):
    # Extract the list of messages from the dictionary returned by window memory
    return window_memory.load_memory_variables({})["recent_history"]

chain = (
    {
        "input": RunnablePassthrough(),
        "chat_history": get_chat_history,
        "recent_history": get_recent_history
    }
    | prompt
    | model
    | StrOutputParser()
)

print("LCEL chain configured!")

# Create a function to maintain ongoing conversation
def chat_with_bot(user_input):
    """Process user input and return bot response while updating both memory types."""
    response = chain.invoke(user_input)

    # Update both memory types with this exchange
    buffer_memory.save_context(
        {"input": user_input},
        {"output": response}
    )

    window_memory.save_context(
        {"input": user_input},
        {"output": response}
    )

    return response

print("Chat function defined!")

!pip install -q gradio

# Create Simple Gradio Interface
import gradio as gr

# Chat history list to store conversation
chat_history = []

# Add welcome message to chat history
welcome_message = "**Assalam-o-Alaikum!** ðŸ‘‹ I'm Saalik ka Dost, your mental health support companion. You can talk to me in English, Urdu, or Roman Urdu - I'll respond in the same language you use. How are you feeling today?"
chat_history.append(("", welcome_message))

# Save the welcome message to both memories
buffer_memory.save_context(
    {"input": "Hello"},
    {"output": welcome_message}
)
window_memory.save_context(
    {"input": "Hello"},
    {"output": welcome_message}
)

# Function to process user input and generate response
def respond(message, history):
    if not message:
        return "", history

    if message.lower() in ["exit", "quit", "bye", "khuda hafiz", "allah hafiz"]:
        farewell = "**Allah Hafiz!** Take care of yourself. _Remember, seeking help is a sign of strength._ ðŸ’™"
        history.append((message, farewell))
        return "", history

    # Process the message through our chatbot
    response = chat_with_bot(message)

    # Add to history and return
    history.append((message, response))
    return "", history

# Create the simple Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("# Mental Health Chatbot - Hassan ka Dost")

    chatbot = gr.Chatbot(
        chat_history,
        height=400
    )

    msg = gr.Textbox(
        show_label=False,
        placeholder="Type your message here..."
    )

    with gr.Row():
        submit = gr.Button("Send")
        clear = gr.Button("Clear")

    gr.Markdown("This chatbot provides mental health support in English, Urdu, or Roman Urdu.")

    # Connect components
    msg.submit(respond, [msg, chatbot], [msg, chatbot])
    submit.click(respond, [msg, chatbot], [msg, chatbot])
    clear.click(lambda: (chat_history[:1], ""), None, [chatbot, msg])


    demo.launch(share=True)

